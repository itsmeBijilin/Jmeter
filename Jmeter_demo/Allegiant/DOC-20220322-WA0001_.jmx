<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="AllegiantBookingScenario_13012020" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.14. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">silo1.qa2.allegiantair.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">fes.devshare.allegiantair.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Booking" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AllegiantBooking_13012020" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="URL_Load" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">0.0</stringProp>
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="User_Input" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var departCode = &quot;ABE&quot;;
var destcode = &quot;SFB&quot;;
var date = &quot;2021-06-03&quot;;
var flightNum = &quot;266&quot;;
var email = &quot;muju463@gmail.com&quot;;
var cardNumber = &quot;5454545454545454&quot;;
var cVV = &quot;787&quot;;
var expiryMonth = &quot;12&quot;;
var expiryYear = &quot;2030&quot;;
var firstName = &quot;Tester&quot;;
var lastName = &quot;QA&quot;;

vars.put(&quot;depart&quot;,departCode);
vars.put(&quot;dest&quot;,destcode);
vars.put(&quot;date&quot;,date);
vars.put(&quot;flightNum&quot;,flightNum);
vars.put(&quot;email&quot;,email);
vars.put(&quot;cardNumber&quot;,cardNumber);
vars.put(&quot;cVV&quot;,cVV);
vars.put(&quot;expiryMonth&quot;,expiryMonth);
vars.put(&quot;expiryYear&quot;,expiryYear);
vars.put(&quot;firstName&quot;,firstName);
vars.put(&quot;lastName&quot;,lastName);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var infoAir = prev.getResponseDataAsString().split(&apos;{travel_deals: {airports&apos;).pop().split(&apos;, airports_codes&apos;)[0];

var info = &apos;{&quot;airports&quot;&apos;+infoAir+&apos;}&apos;;

var airInfo = JSON.parse(info);

var airCount = Object.keys(airInfo.airports).length;
log.info(&quot;The Length &quot;+airCount);

var randAirCount = Math.floor(Math.random() * (airCount-1));

//Depart City Code
var airportKey = Object.keys(airInfo.airports)[randAirCount-1];
log.info(&quot;Indexes &quot;+airportKey);

var airDetails = airInfo.airports[airportKey];
log.info(&quot;Answer &quot;+JSON.stringify(airDetails));

var departCode = airDetails.code;
log.info(&quot;Depart_Id &quot;+departCode);


//Dest City Code
var connectionTitle = Object.keys(airDetails.connections_titles)[0];
log.info(&quot;The value &quot;+connectionTitle);

var destAir = airInfo.airports[connectionTitle];

var destcode = destAir.code;
log.info(&quot;Dest_Id &quot;+destcode);

vars.put(&quot;depart&quot;,departCode);
vars.put(&quot;dest&quot;,destcode);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var inputDate = &quot;2025-12-31&quot;;
var n =3;
var d = new Date(inputDate);
var month = d.getMonth()+1;
var date = d.getDate()+n;
log.info(date);
var year = d.getFullYear();
log.info(&quot;Test Month &quot;+month);

switch(month.toString()){
	case &quot;12&quot;:
	log.info(&quot;Dec&quot;);
	if(date&gt;31){
		date = &apos;01&apos;.slice(-2)
		month = &apos;01&apos;.slice(-2)
		year = d.getFullYear()+1
	}else{
		date = &apos;01&apos;.slice(-2)
	}
	break;
	case &quot;11&quot;:
	log.info(&quot;Nov&quot;);
	if(date&gt;30){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;10&quot;:
	log.info(&quot;Oct&quot;);
	if(date&gt;31){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}
	else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;9&quot;:
	log.info(&quot;Sep&quot;);
	if(date&gt;30){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;8&quot;:
	log.info(&quot;Aug&quot;);
	if(date&gt;31){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;7&quot;:
	log.info(&quot;Jul&quot;);
	if(date&gt;31){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;6&quot;:
	log.info(&quot;Jun&quot;);
	if(date&gt;30){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;5&quot;:
	log.info(&quot;May&quot;);
	if(date&gt;31){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;4&quot;:
	log.info(&quot;Apr&quot;);
	if(date&gt;30){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;3&quot;:
	log.info(&quot;Mar&quot;);
	if(date&gt;31){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;1&quot;:
	log.info(&quot;Jan&quot;);
	if(date&gt;31){
		date = &apos;01&apos;.slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
	}else{
		date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
		month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
	}
	break;
	case &quot;2&quot;:
	log.info(&quot;Feb&quot;);
	if(year%4==0){
		if(date&gt;29){
			date = &apos;01&apos;.slice(-2)
			month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
		}
		else{
			date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
			month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
		}
	}
	else if(year%4!=0){
		if(date&gt;29){
			date = &apos;01&apos;.slice(-2)
			month = (&apos;0&apos;+(d.getMonth()+2)).slice(-2)
		}
		else{
			date = (&apos;0&apos;+(d.getDate()+1)).slice(-2)
			month = (&apos;0&apos;+(d.getMonth()+1)).slice(-2)
		}
		
	}
	break;
	default:
	log.info(&quot;No month&quot;);
	break;
}
log.info(&quot;Date &quot;+date);
log.info(&quot;Month &quot;+month);
log.info(&quot;Year &quot;+year);

var dDate = year+&apos;-&apos;+month+&apos;-&apos;+date;
var h = new Date(dDate);
var month = h.getMonth()+1;
var date = h.getDate();
var year = h.getFullYear();
if(date==01){
	var date = h.getDate()+(n-1)
}
else if(month==01){
	var month = h.getDate()+(n);
}
var finalDate = year+&apos;-&apos;+(&apos;0&apos;+month).slice(-2)+&apos;-&apos;+(&apos;0&apos;+date).slice(-2);
log.info(&quot;Final Date &quot;+finalDate);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.text.SimpleDateFormat;

SimpleDateFormat dateFormatGmt = new SimpleDateFormat(&quot;yyyy-MMM-dd HH:mm:ss&quot;);
dateFormatGmt.setTimeZone(TimeZone.getTimeZone(&quot;GMT&quot;));
SimpleDateFormat dateFormatLocal = new SimpleDateFormat(&quot;yyyy-MMM-dd HH:mm:ss&quot;);
log.info(&quot;*******&quot;+dateFormatLocal.parse( dateFormatGmt.format(new Date()) ));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LandingPage &amp; Manifest" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FlightCalendar" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">g4search/api/flight/calendar/${depart}/${dest}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="PostProcess - FlightDateSelection" enabled="false">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var responseD = JSON.parse(prev.getResponseDataAsString());
var objectCity = Object.keys(responseD.availableDates)[0];
log.info(&quot;The Object &quot;+objectCity);

var num = responseD.availableDates[objectCity].length;
log.info(&quot;The Total count is &quot;+num);

var value = Math.floor(Math.random() * ((num-1) - 0 + 1));
log.info(&quot;Random value &quot;+value);

var date = (responseD.availableDates[objectCity])[value];
log.info(&quot;The Date Selected is &quot;+date);

vars.put(&quot;date&quot;,date);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="DateSelectionForUpsell - postProcess" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">//Date/Month/Year code
var n =3;
var d = new Date(vars.get(&quot;date&quot;));
var month = d.getMonth()+1;
var date = d.getDate()-1;
var year = d.getFullYear();

for(i=0;i&lt;=n;i++){
var yearIncre = 0;
if(year%4==0){
var hash = {1:31,2:29,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31};
		date++;
		if(date==hash[month]){
			date = 0;
			if(month == 12){
				month = 1;
				yearIncre++;
				year = year + yearIncre;
			}else{
				month++;
			}
		}
}
else if(year%4!=0){
var hash = {1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31};
		date++;
		if(date==hash[month]){
			date = 0;
			if(month == 12){
				month = 1;
				yearIncre++;
				year = year + yearIncre;
			}else{
				month++;
			}
		}
	}
}
if(date==0){
		year = year -1;
if(month==1||month==3||month==5||month==7||month==8||month==10||month==12){
		month = 12;
		date = 31;
	}
	else if(month==4||month==6||month==9||month==11){
		month = 12;
		date = 30;
	}
	else if(month==2&amp;&amp;year%4==0){
		month = 12;
		date = 29;
	}
	else if(month==2&amp;&amp;year%4!=0){
		month = 12;
		date = 28;
	}
}
var dDate = year+&apos;-&apos;+(&apos;0&apos;+month).slice(-2)+&apos;-&apos;+(&apos;0&apos;+date).slice(-2);
log.info(&quot;Date Created &quot;+dDate);
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="CheckSelectedDate" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var responseD = JSON.parse(prev.getResponseDataAsString());
var objectCity = Object.keys(responseD.availableDates)[0];

var num = responseD.availableDates[objectCity].length;
var stop = true;
for(i=0;i&lt;num;i++){
	var date = (responseD.availableDates[objectCity])[i];
	if(vars.get(&quot;date&quot;).equals(date)){
		stop = false;
	}
}
if(stop){
	prev.setStopThread(true);
}
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FlightPageSearch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">booking/${depart}/${dest}/${date}/null/1/null/null</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">40.0</stringProp>
                <stringProp name="ConstantTimer.delay">20</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 40 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FlightManifest" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${flightSearchBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">g4search/api/booking/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/plain, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">1275.0</stringProp>
                <stringProp name="ConstantTimer.delay">637.5</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 1275 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;flightSearchBody&quot;,&apos;{&quot;outward&quot;:&quot;&apos;+vars.get(&quot;date&quot;)+&apos;&quot;,&quot;returning&quot;:null,&quot;destination_code&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;origin_code&quot;:&quot;&apos;+vars.get(&quot;depart&quot;)+&apos;&quot;,&quot;travelers&quot;:{&quot;adult&quot;:1,&quot;child_dobs&quot;:[],&quot;lapchild_dobs&quot;:[]}}&apos;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">log.info(&quot;Silo-ID &quot;+prev.getResponseHeaders().split(&apos;silo-id: &apos;).pop().split(&apos;Vary&apos;)[0]);
log.info(&quot;Manifest-Id &quot;+prev.getResponseHeaders().split(&apos;manifest-id: &apos;).pop().split(&apos;silo-id&apos;)[0]);

vars.put(&quot;siloId&quot;,prev.getResponseHeaders().split(&apos;silo-id: &apos;).pop().split(&apos;Vary&apos;)[0]);
vars.put(&quot;manifestId&quot;,prev.getResponseHeaders().split(&apos;manifest-id: &apos;).pop().split(&apos;silo-id&apos;)[0]);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">iterateRegex</stringProp>
                <stringProp name="RegexExtractor.regex">manifest-id: (.+)\ssilo-id: (\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Manifest&amp;SiloFetchCode" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var fetchHeader = prev.getResponseHeaders();

var manifestIDRaw = encodeURI(fetchHeader.split(&apos;manifest-id: &apos;).pop().split(&apos;silo&apos;)[0]);
//var siloIDRaw = encodeURI(fetchHeader.split(&apos;silo-id: &apos;).pop().split(&apos;Vary&apos;)[0]);
var siloIDRaw = encodeURI(fetchHeader.match(&quot;silo-id: (\d+)&quot;));

var manifestID = manifestIDRaw.replaceAll(&apos;%0A&apos;,&apos;&apos;);
var siloID = siloIDRaw.replaceAll(&apos;%0A&apos;,&apos;&apos;);

vars.put(&quot;manifestID&quot;,vars.get(&quot;iterateRegex_g1&quot;));
vars.put(&quot;siloID&quot;,vars.get(&quot;iterateRegex_g2&quot;));

log.info(&quot;Manifest ID &quot;+vars.get(&quot;iterateRegex_g1&quot;));
log.info(&quot;Silo ID &quot;+vars.get(&quot;iterateRegex_g2&quot;));</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.stg.allegiantair.com/data/21/cNlavnuh2TKXUJta0msL2EtJufbisbM_TafhpZa0vng?id=cNlavnuh2TKXUJta0msL2EtJufbisbM_TafhpZa0vng" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                    <stringProp name="Argument.value">${manifestID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">data/${siloID}/${manifestID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.stg.allegiantair.com/g4search/api/shoppingcart/lookup/ota/ssr/FAT/LAS?origin=FAT&amp;destination=LAS" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="origin" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">origin</stringProp>
                    <stringProp name="Argument.value">${depart}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="destination" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">destination</stringProp>
                    <stringProp name="Argument.value">${dest}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/lookup/ota/ssr/${depart}/${dest}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Silo-Id" elementType="Header">
                    <stringProp name="Header.name">Silo-Id</stringProp>
                    <stringProp name="Header.value">${siloID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Manifest-Id</stringProp>
                    <stringProp name="Header.value">${manifestID}</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Flight Page" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FlightData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">data/${siloID}/${manifestID}~F</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Silo-Id" elementType="Header">
                    <stringProp name="Header.name">Silo-Id</stringProp>
                    <stringProp name="Header.value">${siloID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Manifest-Id</stringProp>
                    <stringProp name="Header.value">${manifestID}</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="flightTimeStamps-PreProcess" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var v13 = Date.now();
vars.put(&quot;v13&quot;,v13);
vars.put(&quot;v16&quot;,v13*1000);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var responseFlight = JSON.parse(prev.getResponseDataAsString());
var flightCount = Object.keys(responseFlight.departing).length;
log.info(&quot;Obj Count &quot;+flightCount);

//To find the selected date of flight
var dDate = vars.get(&quot;date&quot;).toString();
var flightNo = vars.get(&quot;flightNum&quot;);
var count = 0;
var stop = true;
for(i=0;i&lt;flightCount;i++){
	count++;
	var departs = JSON.stringify(responseFlight.departing[i].departs).replaceAll(&apos;&quot;&apos;,&apos;&apos;).split(&apos;T&apos;);
	var fltNo = JSON.stringify(responseFlight.departing[i].flight_no).replaceAll(&apos;&quot;&apos;,&apos;&apos;);
	if(dDate.equals(departs[0])&amp;&amp;flightNo.equals(fltNo)){
	log.info(&quot;Checked dates &quot;+departs[0]+&quot; and flights &quot;+fltNo);
	stop = false;
	break;
}
}
if(stop){
	prev.setStopThread(true);
}

//Flight Details
var flightId = JSON.stringify(responseFlight.departing[count-1].id).replaceAll(&apos;&quot;&apos;,&apos;&apos;);
log.info(&quot;Flight Id &quot;+flightId);
vars.put(&quot;flightId&quot;,flightId);

var departs = JSON.stringify(responseFlight.departing[count-1].departs).replaceAll(&apos;&quot;&apos;,&apos;&apos;);
log.info(&quot;Flight depart &quot;+departs);
vars.put(&quot;departs&quot;,departs);

var arrives = JSON.stringify(responseFlight.departing[count-1].arrives).replaceAll(&apos;&quot;&apos;,&apos;&apos;);
log.info(&quot;Flight arrive &quot;+arrives);
vars.put(&quot;arrives&quot;,arrives);

var beforeEncodeCart =&apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;returning&quot;:null,&quot;hotel&quot;:null,&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;travellers&quot;:[{&quot;category&quot;:&quot;Adult&quot;,&quot;dob&quot;:null,&quot;clean_dob&quot;:null,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:null,&quot;checked_bags&quot;:null,&quot;bin_bags&quot;:null,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:{&quot;priority_boarding_selected&quot;:null,&quot;checked_bags&quot;:null,&quot;bin_bags&quot;:null,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:null,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;country&quot;:&quot;US&quot;,&quot;opt_in_marketing&quot;:true,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;flightChoiceCompleted&quot;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;v16&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:false}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;,&quot;returning&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;shuttle&quot;:[]}&apos;;

var afterEncodeCart = encodeURIComponent(beforeEncodeCart).replaceAll(&apos;%7B&apos;,&apos;{&apos;).replaceAll(&apos;%7D&apos;,&apos;}&apos;).replaceAll(&apos;%22&apos;,&apos;&quot;&apos;).replaceAll(&apos;%2C&apos;,&apos;,&apos;);
var cart = afterEncodeCart.replaceAll(&quot;%0A&quot;,&apos;&apos;).replaceAll(&apos;%3A&apos;,&apos;:&apos;).replaceAll(&apos;%5B&apos;,&apos;[&apos;).replaceAll(&apos;%5D&apos;,&apos;]&apos;).replaceAll(&apos;%20&apos;,&apos; &apos;);

vars.put(&quot;cart&quot;,beforeEncodeCart);
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FlightSelectPage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="abTest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">abTest</stringProp>
                    <stringProp name="Argument.value">A</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">transactionIdentifier</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_ip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_ip</stringProp>
                    <stringProp name="Argument.value">192.168.16.149</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sessionID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sessionID</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cart" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cart</stringProp>
                    <stringProp name="Argument.value">${cart}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                  </elementProp>
                  <elementProp name="Silo-Id" elementType="Header">
                    <stringProp name="Header.name">Silo-Id</stringProp>
                    <stringProp name="Header.value">${siloID}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Manifest-Id</stringProp>
                    <stringProp name="Header.value">${manifestID}</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname=" UpsellDateCreation-PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var departFromSplit = vars.get(&quot;departs&quot;).split(&apos;:&apos;);
fromHotel = departFromSplit[0]+&apos;:30&apos;;
log.info(&quot;fromHotel &quot;+fromHotel);
vars.put(&quot;fromHotel&quot;,fromHotel);

var departToSplit = vars.get(&quot;departs&quot;).split(&apos;&apos;);
toHotel = vars.get(&quot;finalDate&quot;)+departToSplit[10]+departToSplit[11]+departToSplit[12]+&apos;:30&apos;;
log.info(&quot;toHotel &quot;+toHotel);
vars.put(&quot;toHotel&quot;,toHotel);

var arriveFromSplit = vars.get(&quot;arrives&quot;).split(&apos;:&apos;);
fromVehicle = arriveFromSplit[0]+&apos;:30&apos;;
log.info(&quot;fromVehicle &quot;+fromVehicle);
vars.put(&quot;fromVehicle&quot;,fromVehicle);

var arriveToSplit = vars.get(&quot;arrives&quot;).split(&apos;&apos;);
toVehicle = vars.get(&quot;finalDate&quot;)+arriveToSplit[10]+arriveToSplit[11]+arriveToSplit[12]+&apos;:30&apos;;
log.info(&quot;toVehicle &quot;+toVehicle);
vars.put(&quot;toVehicle&quot;,toVehicle);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">42.0</stringProp>
                <stringProp name="ConstantTimer.delay">21</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 42 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BundlePage" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BundleData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${request}~${flightId}~B</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Silo-Id" elementType="Header">
                    <stringProp name="Header.name">Silo-Id</stringProp>
                    <stringProp name="Header.value">${siloID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Manifest-Id</stringProp>
                    <stringProp name="Header.value">${manifestID}</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BundleSelect" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="abTest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">abTest</stringProp>
                    <stringProp name="Argument.value">A</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">transactionIdentifier</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_ip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_ip</stringProp>
                    <stringProp name="Argument.value">192.168.16.149</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sessionID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sessionID</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cart" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cart</stringProp>
                    <stringProp name="Argument.value">${bCart}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                  </elementProp>
                  <elementProp name="Silo-Id" elementType="Header">
                    <stringProp name="Header.name">Silo-Id</stringProp>
                    <stringProp name="Header.value">${siloID}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Manifest-Id</stringProp>
                    <stringProp name="Header.value">${manifestID}</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">3684.0</stringProp>
                <stringProp name="ConstantTimer.delay">1842</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 3684 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="package-preprocess" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var fPackage = Math.floor(Date.now() * 1000);
vars.put(&quot;fPackage&quot;,fPackage);
log.info(&quot;Package= &quot;+fPackage);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var bCart = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;travellers&quot;:[{&quot;category&quot;:&quot;Adult&quot;,&quot;dob&quot;:null,&quot;clean_dob&quot;:null,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:null,&quot;checked_bags&quot;:null,&quot;bin_bags&quot;:null,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:false,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;country&quot;:&quot;US&quot;,&quot;opt_in_marketing&quot;:true,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;bundledAncillariesChoiceCompleted&quot;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:false}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;bundledAncillariesChoiceCompleted&quot;:&quot;2020-01-13T06:20:14.723Z&quot;,&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;bCart&quot;,bCart);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HotelPage" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HotelData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${request}~${flightId}~H~1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Silo-Id" elementType="Header">
                    <stringProp name="Header.name">Silo-Id</stringProp>
                    <stringProp name="Header.value">${siloID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Manifest-Id</stringProp>
                    <stringProp name="Header.value">${manifestID}</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HotelSelect" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="abTest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">abTest</stringProp>
                    <stringProp name="Argument.value">A</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">transactionIdentifier</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="client_ip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_ip</stringProp>
                    <stringProp name="Argument.value">192.168.16.149</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sessionID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sessionID</stringProp>
                    <stringProp name="Argument.value">undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cart" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cart</stringProp>
                    <stringProp name="Argument.value">${hCart}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                  </elementProp>
                  <elementProp name="Silo-Id" elementType="Header">
                    <stringProp name="Header.name">Silo-Id</stringProp>
                    <stringProp name="Header.value">${siloID}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Manifest-Id</stringProp>
                    <stringProp name="Header.value">${manifestID}</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">5520.0</stringProp>
                <stringProp name="ConstantTimer.delay">2760</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 5520 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="hotelchooser- PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var hotelchooser = Math.floor(Date.now() * 1000);
vars.put(&quot;hotelchooser&quot;,hotelchooser);
log.info(&quot;hotelchooser= &quot;+hotelchooser);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="hotelChoiceCompleted- PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var hotelChoiceCompleted = Date.now();
vars.put(&quot;hotelChoiceCompleted&quot;,hotelChoiceCompleted);
log.info(&quot;hotelChoiceCompleted= &quot;+hotelChoiceCompleted);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var hCart = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;travellers&quot;:[{&quot;category&quot;:&quot;Adult&quot;,&quot;dob&quot;:null,&quot;clean_dob&quot;:null,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:null,&quot;checked_bags&quot;:null,&quot;bin_bags&quot;:null,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:false,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;country&quot;:&quot;US&quot;,&quot;opt_in_marketing&quot;:true,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;hotelChoiceCompleted&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;hotelChoiceCompleted&quot;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;hotelchooser&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:false}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;bundledAncillariesChoiceCompleted&quot;:&quot;2020-01-13T06:20:14.723Z&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;hCart&quot;,hCart);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VehiclePage" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VehicleData" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${request}~${flightId}~V</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Silo-Id" elementType="Header">
                    <stringProp name="Header.name">Silo-Id</stringProp>
                    <stringProp name="Header.value">${siloID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="AJSUI-Version" elementType="Header">
                    <stringProp name="Header.name">AJSUI-Version</stringProp>
                    <stringProp name="Header.value">292.1.4</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Manifest-Id</stringProp>
                    <stringProp name="Header.value">${manifestID}</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">G4-Client-Id</stringProp>
                    <stringProp name="Header.value">booking-www</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TravellerPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="abTest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">abTest</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transactionIdentifier</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_ip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_ip</stringProp>
                  <stringProp name="Argument.value">192.168.16.149</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionID</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cart</stringProp>
                  <stringProp name="Argument.value">${tCart}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">21396.0</stringProp>
              <stringProp name="ConstantTimer.delay">10698</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 21396 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Transport(16) - PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var transport = Math.floor(Date.now() * 1000);
vars.put(&quot;transport&quot;,transport);
log.info(&quot;transport= &quot;+transport);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Transport(13) - PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var transportSmall = Date.now();
vars.put(&quot;transportSmall&quot;,transportSmall);
log.info(&quot;transportSmall= &quot;+transportSmall);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Travellers - PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var travellers = Math.floor(Date.now() * 1000);
vars.put(&quot;travellers&quot;,travellers);
log.info(&quot;travellers= &quot;+travellers);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TravellerDetailsCompleted - PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var travellerDetailsCompleted = Date.now();
vars.put(&quot;travellerDetailsCompleted&quot;,travellerDetailsCompleted);
log.info(&quot;travellerDetailsCompleted= &quot;+travellerDetailsCompleted);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var tCart = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;returning&quot;:null,&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromVehicle&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toVehicle&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;QA&quot;,&quot;middlenames&quot;:&quot;&quot;,&quot;lastname&quot;:&quot;Test&quot;,&quot;dob&quot;:&quot;07/11/1980&quot;,&quot;clean_dob&quot;:&quot;1980-07-11&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:false,&quot;checked_bags&quot;:0,&quot;bin_bags&quot;:1,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:{&quot;priority_boarding_selected&quot;:false,&quot;checked_bags&quot;:0,&quot;bin_bags&quot;:1,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;,&quot;m&quot;:&quot;7&quot;,&quot;d&quot;:&quot;11&quot;,&quot;y&quot;:&quot;1980&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:&quot;accepted&quot;,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;country&quot;:&quot;US&quot;,&quot;opt_in_marketing&quot;:true,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;vehicleChoiceCompleted&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;transport&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;travellerDetailsCompleted&quot;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;vehicleChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;v16&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;v16&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;v16&quot;)+&apos;},{&quot;transport&quot;:&apos;+vars.get(&quot;v16&quot;)+&apos;},{&quot;travellers&quot;:&apos;+vars.get(&quot;v16&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;v13&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:false}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;,&quot;returning&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;bundledAncillariesChoiceCompleted&quot;:&quot;2020-11-26T08:24:46.853Z&quot;,&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;tCart&quot;,tCart);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SeatMapPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cart</stringProp>
                  <stringProp name="Argument.value">${seatMapCart}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/search/seatmap</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">564.0</stringProp>
              <stringProp name="ConstantTimer.delay">282</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 564 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Seatchooser-  PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var seatchooser = Math.floor(Date.now() * 1000);
vars.put(&quot;seatchooser&quot;,seatchooser);
log.info(&quot;seatchoosersport= &quot;+seatchooser);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var seatMapCart = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromVehicle&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toVehicle&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;Venkat&quot;,&quot;middlenames&quot;:&quot;&quot;,&quot;lastname&quot;:&quot;Bala&quot;,&quot;dob&quot;:&quot;03/10/1989&quot;,&quot;clean_dob&quot;:&quot;1989-03-10&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:null,&quot;checked_bags&quot;:null,&quot;bin_bags&quot;:null,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;,&quot;m&quot;:&quot;3&quot;,&quot;d&quot;:&quot;10&quot;,&quot;y&quot;:&quot;1989&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:false,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;country&quot;:&quot;US&quot;,&quot;opt_in_marketing&quot;:true,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;hotelChoiceCompleted&quot;)+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+vars.get(&quot;travellerDetailsCompleted&quot;)+&apos;,&quot;transport&quot;:&apos;+vars.get(&quot;transportSmall&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;travellerDetailsCompleted&quot;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;hotelchooser&quot;)+&apos;},{&quot;transport&quot;:&apos;+vars.get(&quot;transport&quot;)+&apos;},{&quot;travellers&quot;:&apos;+vars.get(&quot;travellers&quot;)+&apos;},{&quot;seatchooser&quot;:&apos;+vars.get(&quot;seatchooser&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:false}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;bundledAncillariesChoiceCompleted&quot;:&quot;2020-01-13T06:20:14.723Z&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;seatMapCart&quot;,seatMapCart);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SeatPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="abTest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">abTest</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transactionIdentifier</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_ip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_ip</stringProp>
                  <stringProp name="Argument.value">192.168.16.149</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionID</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cart</stringProp>
                  <stringProp name="Argument.value">${seatCart}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">3798.0</stringProp>
              <stringProp name="ConstantTimer.delay">1899</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 3798 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="FlightExtrasCompleted - PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var flightExtrasCompleted = Date.now();
vars.put(&quot;flightExtrasCompleted&quot;,flightExtrasCompleted);
log.info(&quot;flightExtrasCompleted= &quot;+flightExtrasCompleted);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var seatCart = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromVehicle&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toVehicle&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;Venkat&quot;,&quot;middlenames&quot;:&quot;&quot;,&quot;lastname&quot;:&quot;Bala&quot;,&quot;dob&quot;:&quot;03/10/1989&quot;,&quot;clean_dob&quot;:&quot;1989-03-10&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:null,&quot;checked_bags&quot;:null,&quot;bin_bags&quot;:null,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;,&quot;m&quot;:&quot;3&quot;,&quot;d&quot;:&quot;10&quot;,&quot;y&quot;:&quot;1989&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:false,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;country&quot;:&quot;US&quot;,&quot;opt_in_marketing&quot;:true,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;hotelChoiceCompleted&quot;)+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+vars.get(&quot;travellerDetailsCompleted&quot;)+&apos;,&quot;flightExtrasCompleted&quot;:&apos;+vars.get(&quot;flightExtrasCompleted&quot;)+&apos;,&quot;transport&quot;:&apos;+vars.get(&quot;transportSmall&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;flightExtrasCompleted&quot;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;,&quot;flightExtrasCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;hotelchooser&quot;)+&apos;},{&quot;transport&quot;:&apos;+vars.get(&quot;transport&quot;)+&apos;},{&quot;travellers&quot;:&apos;+vars.get(&quot;travellers&quot;)+&apos;},{&quot;seatchooser&quot;:&apos;+vars.get(&quot;seatchooser&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:false}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;bundledAncillariesChoiceCompleted&quot;:&quot;2020-01-13T06:20:14.723Z&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;seatCart&quot;,seatCart);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BagPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="abTest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">abTest</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transactionIdentifier</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_ip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_ip</stringProp>
                  <stringProp name="Argument.value">192.168.16.149</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionID</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cart</stringProp>
                  <stringProp name="Argument.value">${bagCart}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">9339.0</stringProp>
              <stringProp name="ConstantTimer.delay">4669.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 9339 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Bagchooser PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var bagchooser = Math.floor(Date.now() * 1000);
vars.put(&quot;bagchooser&quot;,bagchooser);
log.info(&quot;bagchooser= &quot;+bagchooser);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var bagCart = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromVehicle&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toVehicle&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;Venkat&quot;,&quot;middlenames&quot;:&quot;&quot;,&quot;lastname&quot;:&quot;Bala&quot;,&quot;dob&quot;:&quot;03/10/1989&quot;,&quot;clean_dob&quot;:&quot;1989-03-10&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:false,&quot;checked_bags&quot;:0,&quot;bin_bags&quot;:0,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;,&quot;m&quot;:&quot;3&quot;,&quot;d&quot;:&quot;10&quot;,&quot;y&quot;:&quot;1989&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:false,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;country&quot;:&quot;US&quot;,&quot;opt_in_marketing&quot;:true,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;hotelChoiceCompleted&quot;)+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+vars.get(&quot;travellerDetailsCompleted&quot;)+&apos;,&quot;flightExtrasCompleted&quot;:&apos;+vars.get(&quot;flightExtrasCompleted&quot;)+&apos;,&quot;transport&quot;:&apos;+vars.get(&quot;transportSmall&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;flightExtrasCompleted&quot;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;flightExtrasCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;hotelchooser&quot;)+&apos;},{&quot;transport&quot;:&apos;+vars.get(&quot;transport&quot;)+&apos;},{&quot;travellers&quot;:&apos;+vars.get(&quot;travellers&quot;)+&apos;},{&quot;seatchooser&quot;:&apos;+vars.get(&quot;seatchooser&quot;)+&apos;},{&quot;bagchooser&quot;:&apos;+vars.get(&quot;bagchooser&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:false}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;bundledAncillariesChoiceCompleted&quot;:&quot;2020-01-13T06:20:14.723Z&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;bagCart&quot;,bagCart);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.stg.allegiantair.com/g4search/api/lookup/paymentTypes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/lookup/paymentTypes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.stg.allegiantair.com/g4search/api/log/javascript/cNlavnuh2TKXUJta0msL2EtJufbisbM_TafhpZa0vng" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;category&quot;:&quot;js_error&quot;,&quot;msg&quot;:&quot;Uncaught TypeError: countries.getValuesForCountries is not a function&quot;,&quot;file&quot;:&quot;https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4&quot;,&quot;line&quot;:1,&quot;column&quot;:1621001,&quot;payload&quot;:{&quot;cart&quot;:{},&quot;app&quot;:&quot;booking&quot;,&quot;_attributes&quot;:{}},&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36&quot;,&quot;plugins&quot;:[&quot;Chrome PDF Plugin&quot;,&quot;Chrome PDF Viewer&quot;,&quot;Native Client&quot;],&quot;trace&quot;:[&quot;Object.&lt;anonymous&gt;()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:1638177&quot;,&quot;EJS.render()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:76432&quot;,&quot;Object.&lt;anonymous&gt;()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:76142&quot;,&quot;p.cached.&lt;computed&gt;()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:73585&quot;,&quot;Object.&lt;anonymous&gt;()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:72079&quot;,&quot;i()@https://www.stg.allegiantair.com/sites/default/files/advagg_js/js__J2-PCWlZK3UyZ7ti2kch_Jd1Dy-Nl00pnBGNJLeVFRM__6jUYo5lYAoXOoRpJ3HmLGO0r0u-IsmYfPBtj5rd03XM__1motoMhogn4-LmFTOSQe52-ueFiJ-892YwZHVY35O4I.js:2:27451&quot;,&quot;Object.add()@https://www.stg.allegiantair.com/sites/default/files/advagg_js/js__J2-PCWlZK3UyZ7ti2kch_Jd1Dy-Nl00pnBGNJLeVFRM__6jUYo5lYAoXOoRpJ3HmLGO0r0u-IsmYfPBtj5rd03XM__1motoMhogn4-LmFTOSQe52-ueFiJ-892YwZHVY35O4I.js:2:27750&quot;,&quot;Function.$.View()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:72060&quot;,&quot;Object.&lt;anonymous&gt;()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:1632641&quot;,&quot;EJS.render()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:76432&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/log/javascript/${manifestID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">716.0</stringProp>
              <stringProp name="ConstantTimer.delay">358</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 716 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TripFlexPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="abTest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">abTest</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transactionIdentifier</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_ip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_ip</stringProp>
                  <stringProp name="Argument.value">192.168.16.149</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionID</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cart</stringProp>
                  <stringProp name="Argument.value">${tripCart}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">175.0</stringProp>
              <stringProp name="ConstantTimer.delay">87.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 175 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="CartItemsSelectionCompleted -  PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var cartItemsSelectionCompleted = Date.now();
vars.put(&quot;cartItemsSelectionCompleted&quot;,cartItemsSelectionCompleted);
log.info(&quot;cartItemsSelectionCompleted= &quot;+cartItemsSelectionCompleted);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Payment PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var payment = Math.floor(Date.now() * 1000);
vars.put(&quot;payment&quot;,payment);
log.info(&quot;payment= &quot;+payment);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var tripCart = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromVehicle&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toVehicle&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;Venkat&quot;,&quot;middlenames&quot;:&quot;&quot;,&quot;lastname&quot;:&quot;Bala&quot;,&quot;dob&quot;:&quot;03/10/1989&quot;,&quot;clean_dob&quot;:&quot;1989-03-10&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:false,&quot;checked_bags&quot;:0,&quot;bin_bags&quot;:0,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;,&quot;m&quot;:&quot;3&quot;,&quot;d&quot;:&quot;10&quot;,&quot;y&quot;:&quot;1989&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:&quot;simulated&quot;,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;country&quot;:&quot;US&quot;,&quot;opt_in_marketing&quot;:true,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;hotelChoiceCompleted&quot;)+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+vars.get(&quot;travellerDetailsCompleted&quot;)+&apos;,&quot;flightExtrasCompleted&quot;:&apos;+vars.get(&quot;flightExtrasCompleted&quot;)+&apos;,&quot;transport&quot;:&apos;+vars.get(&quot;transportSmall&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;cartItemsSelectionCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;:&apos;+vars.get(&quot;cartItemsSelectionCompleted&quot;)+&apos;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;hotelchooser&quot;)+&apos;},{&quot;transport&quot;:&apos;+vars.get(&quot;transport&quot;)+&apos;},{&quot;travellers&quot;:&apos;+vars.get(&quot;travellers&quot;)+&apos;},{&quot;seatchooser&quot;:&apos;+vars.get(&quot;seatchooser&quot;)+&apos;},{&quot;bagchooser&quot;:&apos;+vars.get(&quot;bagchooser&quot;)+&apos;},{&quot;payment&quot;:&apos;+vars.get(&quot;payment&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:false,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:true,&quot;container&quot;:&quot;#up-pay-monthly-container&quot;}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;bundledAncillariesChoiceCompleted&quot;:&quot;2020-01-13T06:20:14.723Z&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;tripCart&quot;,tripCart);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.stg.allegiantair.com/g4search/api/log/javascript/cNlavnuh2TKXUJta0msL2EtJufbisbM_TafhpZa0vng" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;category&quot;:&quot;js_error&quot;,&quot;msg&quot;:&quot;Uncaught Error: The Pay Monthly container DOM element does not exist!\nPlease specify an existing element or check the CSS selector&quot;,&quot;file&quot;:&quot;https://www.stg.allegiantair.com/sites/default/files/uplift/uplift_v3.10.10_0.js?id=UP-27938420-99&quot;,&quot;line&quot;:2,&quot;column&quot;:24659,&quot;payload&quot;:{&quot;cart&quot;:{},&quot;app&quot;:&quot;booking&quot;,&quot;_attributes&quot;:{}},&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36&quot;,&quot;plugins&quot;:[&quot;Chrome PDF Plugin&quot;,&quot;Chrome PDF Viewer&quot;,&quot;Native Client&quot;],&quot;trace&quot;:[&quot;Ro()@https://www.stg.allegiantair.com/sites/default/files/uplift/uplift_v3.10.10_0.js?id=UP-27938420-99:2:24795&quot;,&quot;load()@https://www.stg.allegiantair.com/sites/default/files/uplift/uplift_v3.10.10_0.js?id=UP-27938420-99:2:30914&quot;,&quot;requestUpdateIFrame()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:599447&quot;,&quot;r.&lt;anonymous&gt;()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:601952&quot;,&quot;P()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:107562&quot;,&quot;Object.&lt;anonymous&gt;()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:107764&quot;,&quot;Object.&lt;anonymous&gt;()@https://www.stg.allegiantair.com/sites/all/modules/custom/aares/ui/AllegiantJSUI/booking/production.js?version=292.1.4:1:100915&quot;,&quot;Object.&lt;anonymous&gt;()@https://www.stg.allegiantair.com/sites/default/files/advagg_js/js__J2-PCWlZK3UyZ7ti2kch_Jd1Dy-Nl00pnBGNJLeVFRM__6jUYo5lYAoXOoRpJ3HmLGO0r0u-IsmYfPBtj5rd03XM__1motoMhogn4-LmFTOSQe52-ueFiJ-892YwZHVY35O4I.js:2:28770&quot;,&quot;i()@https://www.stg.allegiantair.com/sites/default/files/advagg_js/js__J2-PCWlZK3UyZ7ti2kch_Jd1Dy-Nl00pnBGNJLeVFRM__6jUYo5lYAoXOoRpJ3HmLGO0r0u-IsmYfPBtj5rd03XM__1motoMhogn4-LmFTOSQe52-ueFiJ-892YwZHVY35O4I.js:2:27451&quot;,&quot;Object.add [as done]()@https://www.stg.allegiantair.com/sites/default/files/advagg_js/js__J2-PCWlZK3UyZ7ti2kch_Jd1Dy-Nl00pnBGNJLeVFRM__6jUYo5lYAoXOoRpJ3HmLGO0r0u-IsmYfPBtj5rd03XM__1motoMhogn4-LmFTOSQe52-ueFiJ-892YwZHVY35O4I.js:2:27750&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/log/javascript/${manifestID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">417.0</stringProp>
              <stringProp name="ConstantTimer.delay">208.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 417 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.stg.allegiantair.com/g4search/api/shoppingcart/lookup/ota/Countries/US?country_code=US" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="country_code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">country_code</stringProp>
                  <stringProp name="Argument.value">US</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/lookup/ota/Countries/US</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BeforePayment" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="abTest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">abTest</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transactionIdentifier</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_ip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_ip</stringProp>
                  <stringProp name="Argument.value">192.168.16.149</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionID</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cart</stringProp>
                  <stringProp name="Argument.value">${beforePayment}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">4708.0</stringProp>
              <stringProp name="ConstantTimer.delay">2354</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 4708 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TripFlexCompleted PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var tripFlexCompleted = Date.now();
vars.put(&quot;tripFlexCompleted&quot;,tripFlexCompleted);
log.info(&quot;tripFlexCompleted= &quot;+tripFlexCompleted);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var beforePayment = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromVehicle&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toVehicle&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;Venkat&quot;,&quot;middlenames&quot;:&quot;&quot;,&quot;lastname&quot;:&quot;Bala&quot;,&quot;dob&quot;:&quot;03/10/1989&quot;,&quot;clean_dob&quot;:&quot;1989-03-10&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:false,&quot;checked_bags&quot;:0,&quot;bin_bags&quot;:0,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;,&quot;m&quot;:&quot;3&quot;,&quot;d&quot;:&quot;10&quot;,&quot;y&quot;:&quot;1989&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:&quot;declined&quot;,&quot;terms_accepted&quot;:false,&quot;instant_credit&quot;:false,&quot;card_type&quot;:null,&quot;card_name&quot;:null,&quot;card_no&quot;:null,&quot;ccv&quot;:null,&quot;first_name&quot;:&quot;Venkat&quot;,&quot;last_name&quot;:&quot;Bala&quot;,&quot;country&quot;:&quot;US&quot;,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;email&quot;:&quot;mohammedmustafa@tridentsqa.com&quot;,&quot;opt_in_marketing&quot;:true,&quot;password&quot;:&quot;password&quot;,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;hotelChoiceCompleted&quot;)+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+vars.get(&quot;travellerDetailsCompleted&quot;)+&apos;,&quot;flightExtrasCompleted&quot;:&apos;+vars.get(&quot;flightExtrasCompleted&quot;)+&apos;,&quot;transport&quot;:&apos;+vars.get(&quot;transportSmall&quot;)+&apos;,&quot;tripFlexCompleted&quot;:&apos;+vars.get(&quot;tripFlexCompleted&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;tripFlexCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;:&apos;+vars.get(&quot;cartItemsSelectionCompleted&quot;)+&apos;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;,&quot;tripFlexCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;hotelchooser&quot;)+&apos;},{&quot;transport&quot;:&apos;+vars.get(&quot;transport&quot;)+&apos;},{&quot;travellers&quot;:&apos;+vars.get(&quot;travellers&quot;)+&apos;},{&quot;seatchooser&quot;:&apos;+vars.get(&quot;seatchooser&quot;)+&apos;},{&quot;bagchooser&quot;:&apos;+vars.get(&quot;bagchooser&quot;)+&apos;},{&quot;payment&quot;:&apos;+vars.get(&quot;payment&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:true,&quot;container&quot;:&quot;#up-pay-monthly-container&quot;}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;bundledAncillariesChoiceCompleted&quot;:&quot;2020-01-13T06:20:14.723Z&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;beforePayment&quot;,beforePayment);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var paymentCar = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+flightId+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+arrives+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+departs+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;2020-07-16T11:00&quot;,&quot;to&quot;:&quot;2020-07-19T11:00&quot;,&quot;location&quot;:&quot;SFB&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;2020-07-16T13:30&quot;,&quot;to&quot;:&quot;2020-07-19T13:30&quot;,&quot;location&quot;:&quot;SFB&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;Test&quot;,&quot;lastname&quot;:&quot;Automation&quot;,&quot;dob&quot;:&quot;08/16/1980&quot;,&quot;clean_dob&quot;:&quot;1980-08-16&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:false,&quot;checked_bags&quot;:0,&quot;bin_bags&quot;:0,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+$prop.value(&quot;clip&quot;,&quot;manifestID_Clip&quot;)+&apos;__adult_0&quot;,&quot;m&quot;:&quot;8&quot;,&quot;d&quot;:&quot;16&quot;,&quot;y&quot;:&quot;1980&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:&quot;declined&quot;,&quot;terms_accepted&quot;:true,&quot;instant_credit&quot;:false,&quot;card_type&quot;:&quot;MC&quot;,&quot;card_name&quot;:&quot;Mastercard&quot;,&quot;card_no&quot;:&quot;&apos;+$prop.value(&quot;clip&quot;,&quot;cardNo&quot;)+&apos;&quot;,&quot;expires_month&quot;:&quot;12&quot;,&quot;expires_year&quot;:&quot;2030&quot;,&quot;ccv&quot;:&quot;&apos;+$prop.value(&quot;clip&quot;,&quot;cvv&quot;)+&apos;&quot;,&quot;first_name&quot;:&quot;Test&quot;,&quot;last_name&quot;:&quot;Automation&quot;,&quot;name_on_card&quot;:&quot;Tester&quot;,&quot;addr1&quot;:&quot;America&quot;,&quot;city&quot;:&quot;SanAndreas&quot;,&quot;state&quot;:&quot;IN&quot;,&quot;country&quot;:&quot;US&quot;,&quot;postcode&quot;:&quot;77575&quot;,&quot;phone&quot;:&quot;757-786-8858&quot;,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;email&quot;:&quot;mohammedmustafa@tridentsqa.com&quot;,&quot;opt_in_marketing&quot;:false,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+timeStamp13+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+flightId+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+flightId+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+timeStamp13+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+timeStamp13+&apos;,&quot;paymentDetailsValidated&quot;:&apos;+timeStamp13+&apos;,&quot;flightExtrasCompleted&quot;:&apos;+timeStamp13+&apos;,&quot;transport&quot;:&apos;+timeStamp13+&apos;,&quot;userInputCompleted&quot;:&apos;+timeStamp13+&apos;,&quot;tripFlexCompleted&quot;:&apos;+timeStamp13+&apos;,&quot;flightChoiceValid&quot;:&apos;+timeStamp13+&apos;,&quot;saveTriggerEvent&quot;:&quot;userInputCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;:&apos;+timeStamp13+&apos;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;,&quot;tripFlexCompleted&quot;,&quot;userInputCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+timeStamp16+&apos;},{&quot;package&quot;:&apos;+timeStamp16+&apos;},{&quot;hotelchooser&quot;:&apos;+timeStamp16+&apos;},{&quot;transport&quot;:&apos;+timeStamp16+&apos;},{&quot;travellers&quot;:&apos;+timeStamp16+&apos;},{&quot;seatchooser&quot;:&apos;+timeStamp16+&apos;},{&quot;bagchooser&quot;:&apos;+timeStamp16+&apos;},{&quot;payment&quot;:&apos;+timeStamp16+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+timeStamp13+&apos;,&quot;optionsLastUpdated&quot;:&apos;+timeStamp13+&apos;,&quot;options&quot;:{&quot;checkout&quot;:true,&quot;container&quot;:&quot;#up-pay-monthly-container&quot;}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+$prop.value(&quot;clip&quot;,&quot;manifestID_Clip&quot;)+&apos;&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;bundledAncillariesChoiceCompleted&quot;:&quot;&apos;+TDateZ+&apos;&quot;,&quot;shuttle&quot;:[]}&apos;;

//var afterEncodCart = encodeURIComponent(paymentCar).replaceAll(&apos;%7B&apos;,&apos;{&apos;).replaceAll(&apos;%7D&apos;,&apos;}&apos;).replaceAll(&apos;%22&apos;,&apos;&quot;&apos;).replaceAll(&apos;%2C&apos;,&apos;,&apos;);
//var paymentCart = afterEncodCart.replaceAll(&quot;%0A&quot;,&apos;&apos;).replaceAll(&apos;%3A&apos;,&apos;:&apos;).replaceAll(&apos;%5B&apos;,&apos;[&apos;).replaceAll(&apos;%5D&apos;,&apos;]&apos;).replaceAll(&apos;%20&apos;,&apos; &apos;);

vars.put(&quot;paymentCart&quot;,paymentCar);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PaymentEncryption" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PIE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${v13}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pie/v1/1/getkey.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">2.0</stringProp>
                <stringProp name="ConstantTimer.delay">1</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 2 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var pieKey = prev.getResponseDataAsString().replaceAll(&apos;// PIE version: 1.2.1&apos;,&apos;&apos;).replaceAll(&apos;// PIE namespace&apos;,&apos;&apos;).replaceAll(&apos;// dynamically-generated PIE settings&apos;,&apos;&apos;).replaceAll(/(\r\n|\n|\r)/gm,&apos;&apos;);
vars.put(&quot;pieKey&quot;,pieKey);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Encryption" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pie/v1/1/encryption.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Manifest-Id" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="G4-Client-Id" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var encryptKey = prev.getResponseDataAsString().replaceAll(&apos;// Copyright 2012-2015 Voltage Security LLC&apos;,&apos;&apos;).replaceAll(&apos;// Copyright 2012-2013 Voltage Security, Inc.&apos;,&apos;&apos;).replaceAll(/(\r\n|\n|\r)/gm,&apos;&apos;);

vars.put(&quot;encryptKey&quot;,encryptKey);
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var decryptFunc = eval(vars.get(&quot;pieKey&quot;)+vars.get(&quot;encryptKey&quot;));

var cardNo = vars.get(&quot;cardNumber&quot;);
var cvv = vars.get(&quot;cVV&quot;);
var result = ProtectPANandCVV(cardNo,cvv);

log.info(&quot;Card Number &quot;+result[0]);
log.info(&quot;Card Number &quot;+result[1]);

vars.put(&quot;cardNo&quot;,result[0]);
vars.put(&quot;cvv&quot;,result[1]);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PaymentPage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="abTest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">abTest</stringProp>
                  <stringProp name="Argument.value">A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transactionIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transactionIdentifier</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_ip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_ip</stringProp>
                  <stringProp name="Argument.value">192.168.16.149</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionID</stringProp>
                  <stringProp name="Argument.value">undefined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cart</stringProp>
                  <stringProp name="Argument.value">${paymentCart}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">g4search/api/shoppingcart/${manifestID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://www.stg.allegiantair.com</stringProp>
                </elementProp>
                <elementProp name="Silo-Id" elementType="Header">
                  <stringProp name="Header.name">Silo-Id</stringProp>
                  <stringProp name="Header.value">${siloID}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="AJSUI-Version" elementType="Header">
                  <stringProp name="Header.name">AJSUI-Version</stringProp>
                  <stringProp name="Header.value">292.1.4</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Manifest-Id" elementType="Header">
                  <stringProp name="Header.name">Manifest-Id</stringProp>
                  <stringProp name="Header.value">${manifestID}</stringProp>
                </elementProp>
                <elementProp name="G4-Client-Id" elementType="Header">
                  <stringProp name="Header.name">G4-Client-Id</stringProp>
                  <stringProp name="Header.value">booking-www</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">20329.0</stringProp>
              <stringProp name="ConstantTimer.delay">10164.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 20329 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PaymentDetailsValidated PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var paymentDetailsValidated = Date.now();
vars.put(&quot;paymentDetailsValidated&quot;,paymentDetailsValidated);
log.info(&quot;paymentDetailsValidated= &quot;+paymentDetailsValidated);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="UserInputCompleted PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var userInputCompleted = Date.now();
vars.put(&quot;userInputCompleted&quot;,userInputCompleted);
log.info(&quot;userInputCompleted= &quot;+userInputCompleted);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="UTCTimeZone -  PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var usDate = new Date();
var msecs = (&apos;0&apos;+(usDate.getUTCMilliseconds())).slice(-3);
var secs = (&apos;0&apos;+(usDate.getUTCSeconds())).slice(-2);
var mins = (&apos;0&apos;+(usDate.getUTCMinutes())).slice(-2);
var hour = (&apos;0&apos;+(usDate.getUTCHours())).slice(-2);
var dDate = (&apos;0&apos;+(usDate.getUTCDate())).slice(-2);
var month = (&apos;0&apos;+(usDate.getUTCMonth()+1)).slice(-2);
var year = usDate.getFullYear();
var TDateZ = year+&apos;-&apos;+month+&apos;-&apos;+dDate+&apos;T&apos;+hour+&apos;:&apos;+mins+&apos;:&apos;+secs+&apos;.&apos;+msecs+&apos;Z&apos;;
log.info(&quot;Date &quot;+TDateZ);
vars.put(&quot;TDateZ&quot;,TDateZ);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TimeZoneGMT PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var date = new Date();
var utcDate = new Date(date.toGMTString());
utcDate.setHours(utcDate.getHours()-5);
utcDate.setMinutes(utcDate.getMinutes()-40);
var usDate = new Date(utcDate);
log.info(usDate);

var msecs = (&apos;0&apos;+(usDate.getMilliseconds())).slice(-2);
var secs = (&apos;0&apos;+(usDate.getSeconds())).slice(-2);
var mins = (&apos;0&apos;+(usDate.getMinutes())).slice(-2);
var hour = (&apos;0&apos;+(usDate.getHours())).slice(-2);
var dDate = (&apos;0&apos;+(usDate.getDate())).slice(-2);
var month = (&apos;0&apos;+(usDate.getMonth()+1)).slice(-2);
var year = usDate.getFullYear();

var TDateZ = year+&apos;-&apos;+month+&apos;-&apos;+dDate+&apos;T&apos;+hour+&apos;:&apos;+mins+&apos;:&apos;+secs+&apos;.&apos;+msecs+&apos;Z&apos;;

vars.put(&quot;TDateZ&quot;,TDateZ);

log.info(TDateZ);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var paymentCar = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromVehicle&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toVehicle&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;&apos;+vars.get(&quot;firstName&quot;)+&apos;&quot;,&quot;middlenames&quot;:&quot;&quot;,&quot;lastname&quot;:&quot;&apos;+vars.get(&quot;lastName&quot;)+&apos;&quot;,&quot;dob&quot;:&quot;03/10/1989&quot;,&quot;clean_dob&quot;:&quot;1989-03-10&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:false,&quot;checked_bags&quot;:0,&quot;bin_bags&quot;:0,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;,&quot;m&quot;:&quot;3&quot;,&quot;d&quot;:&quot;10&quot;,&quot;y&quot;:&quot;1989&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:&quot;declined&quot;,&quot;terms_accepted&quot;:true,&quot;instant_credit&quot;:false,&quot;card_type&quot;:&quot;MC&quot;,&quot;card_name&quot;:&quot;Mastercard&quot;,&quot;card_no&quot;:&quot;&apos;+vars.get(&quot;cardNo&quot;)+&apos;&quot;,&quot;expires_month&quot;:&quot;&apos;+vars.get(&quot;expiryMonth&quot;)+&apos;&quot;,&quot;expires_year&quot;:&quot;&apos;+vars.get(&quot;expiryYear&quot;)+&apos;&quot;,&quot;ccv&quot;:&quot;&apos;+vars.get(&quot;cvv&quot;)+&apos;&quot;,&quot;first_name&quot;:&quot;&apos;+vars.get(&quot;firstName&quot;)+&apos;&quot;,&quot;last_name&quot;:&quot;&apos;+vars.get(&quot;lastName&quot;)+&apos;&quot;,&quot;name_on_card&quot;:&quot;Tester&quot;,&quot;addr1&quot;:&quot;Sanadreas&quot;,&quot;city&quot;:&quot;chennai&quot;,&quot;state&quot;:&quot;IN&quot;,&quot;country&quot;:&quot;US&quot;,&quot;postcode&quot;:&quot;600002&quot;,&quot;phone&quot;:&quot;(97-3)7-367388378&quot;,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;email&quot;:&quot;&apos;+vars.get(&quot;email&quot;)+&apos;&quot;,&quot;opt_in_marketing&quot;:false,&quot;password&quot;:&quot;&quot;,&quot;password_conf&quot;:&quot;&quot;,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;hotelChoiceCompleted&quot;)+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+vars.get(&quot;travellerDetailsCompleted&quot;)+&apos;,&quot;paymentDetailsValidated&quot;:&apos;+vars.get(&quot;paymentDetailsValidated&quot;)+&apos;,&quot;flightExtrasCompleted&quot;:&apos;+vars.get(&quot;flightExtrasCompleted&quot;)+&apos;,&quot;transport&quot;:&apos;+vars.get(&quot;transportSmall&quot;)+&apos;,&quot;userInputCompleted&quot;:&apos;+vars.get(&quot;userInputCompleted&quot;)+&apos;,&quot;tripFlexCompleted&quot;:&apos;+vars.get(&quot;tripFlexCompleted&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;userInputCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;:&apos;+vars.get(&quot;cartItemsSelectionCompleted&quot;)+&apos;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;,&quot;tripFlexCompleted&quot;,&quot;userInputCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;hotelchooser&quot;)+&apos;},{&quot;transport&quot;:&apos;+vars.get(&quot;transport&quot;)+&apos;},{&quot;travellers&quot;:&apos;+vars.get(&quot;travellers&quot;)+&apos;},{&quot;seatchooser&quot;:&apos;+vars.get(&quot;seatchooser&quot;)+&apos;},{&quot;bagchooser&quot;:&apos;+vars.get(&quot;bagchooser&quot;)+&apos;},{&quot;payment&quot;:&apos;+vars.get(&quot;payment&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:true,&quot;container&quot;:&quot;#up-pay-monthly-container&quot;}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;bundledAncillariesChoiceCompleted&quot;:&quot;&apos;+vars.get(&quot;TDateZ&quot;)+&apos;&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;shuttle&quot;:[]}&apos;;

//var afterEncodCart = encodeURIComponent(paymentCar).replaceAll(&apos;%7B&apos;,&apos;{&apos;).replaceAll(&apos;%7D&apos;,&apos;}&apos;).replaceAll(&apos;%22&apos;,&apos;&quot;&apos;).replaceAll(&apos;%2C&apos;,&apos;,&apos;);
//var paymentCart = afterEncodCart.replaceAll(&quot;%0A&quot;,&apos;&apos;).replaceAll(&apos;%3A&apos;,&apos;:&apos;).replaceAll(&apos;%5B&apos;,&apos;[&apos;).replaceAll(&apos;%5D&apos;,&apos;]&apos;).replaceAll(&apos;%20&apos;,&apos; &apos;);

vars.put(&quot;paymentCart&quot;,paymentCar);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var paymentCart = &apos;{&quot;search_hash&quot;:null,&quot;departing&quot;:{&quot;id&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;arrives&quot;:&quot;&apos;+vars.get(&quot;arrives&quot;)+&apos;&quot;,&quot;departs&quot;:&quot;&apos;+vars.get(&quot;departs&quot;)+&apos;&quot;},&quot;flight_upsell&quot;:null,&quot;hotel&quot;:null,&quot;hotel_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromHotel&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toHotel&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:false},&quot;hotel_rooms&quot;:1,&quot;rooms_counter&quot;:1,&quot;promos&quot;:[],&quot;shuttles&quot;:[],&quot;vehicle&quot;:null,&quot;vehicle_upsell&quot;:{&quot;from&quot;:&quot;&apos;+vars.get(&quot;fromVehicle&quot;)+&apos;&quot;,&quot;to&quot;:&quot;&apos;+vars.get(&quot;toVehicle&quot;)+&apos;&quot;,&quot;location&quot;:&quot;&apos;+vars.get(&quot;dest&quot;)+&apos;&quot;,&quot;require_times&quot;:true},&quot;travellers&quot;:[{&quot;gender&quot;:&quot;male&quot;,&quot;category&quot;:&quot;Adult&quot;,&quot;firstname&quot;:&quot;Venkat&quot;,&quot;middlenames&quot;:&quot;&quot;,&quot;lastname&quot;:&quot;Bala&quot;,&quot;dob&quot;:&quot;03/09/1990&quot;,&quot;clean_dob&quot;:&quot;1990-03-09&quot;,&quot;known_traveler_number&quot;:null,&quot;redress&quot;:null,&quot;departing&quot;:{&quot;priority_boarding_selected&quot;:false,&quot;checked_bags&quot;:0,&quot;bin_bags&quot;:0,&quot;requests&quot;:[],&quot;requests_comments&quot;:&quot;&quot;},&quot;returning&quot;:null,&quot;position&quot;:1,&quot;pricingSource&quot;:&quot;flight&quot;,&quot;requests_updated&quot;:false,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;save_traveller&quot;:false,&quot;emergency_contact&quot;:{&quot;enabled&quot;:false,&quot;different&quot;:true,&quot;wantsDifferent&quot;:false,&quot;phonePrefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;},&quot;passenger&quot;:1,&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;_adult_0&quot;,&quot;d&quot;:&quot;9&quot;,&quot;m&quot;:&quot;3&quot;,&quot;y&quot;:&quot;1990&quot;}],&quot;lapChildren&quot;:[],&quot;payment_details&quot;:{&quot;tripflex&quot;:&quot;declined&quot;,&quot;terms_accepted&quot;:true,&quot;instant_credit&quot;:false,&quot;card_type&quot;:&quot;MC&quot;,&quot;card_name&quot;:&quot;Mastercard&quot;,&quot;card_no&quot;:&quot;545454gT2cD6YgE5454&quot;,&quot;expires_month&quot;:&quot;2&quot;,&quot;expires_year&quot;:&quot;2024&quot;,&quot;ccv&quot;:&quot;d5zi&quot;,&quot;first_name&quot;:&quot;Venkat&quot;,&quot;last_name&quot;:&quot;Bala&quot;,&quot;name_on_card&quot;:&quot;tester&quot;,&quot;addr1&quot;:&quot;Sanadreas&quot;,&quot;addr2&quot;:&quot;&quot;,&quot;city&quot;:&quot;chennai&quot;,&quot;state&quot;:&quot;IN&quot;,&quot;country&quot;:&quot;US&quot;,&quot;postcode&quot;:&quot;600002&quot;,&quot;phone&quot;:&quot;(97-3)7-367388378&quot;,&quot;phone_prefix&quot;:&quot;US +1&quot;,&quot;phoneCountryCode&quot;:&quot;US&quot;,&quot;phoneCountryCallingCode&quot;:&quot;1&quot;,&quot;email&quot;:&quot;mohammedmustafa@tridentsqa.com&quot;,&quot;opt_in_marketing&quot;:false,&quot;payment_method&quot;:&quot;CC&quot;,&quot;appliedPoints&quot;:false,&quot;storeCard&quot;:false,&quot;encryptionType&quot;:&quot;PIE&quot;},&quot;flightChoiceCompleted&quot;:&apos;+vars.get(&quot;flightChoiceCompleted&quot;)+&apos;,&quot;flightcomboid&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;lastKnownFlightComboId&quot;:&quot;&apos;+vars.get(&quot;flightId&quot;)+&apos;&quot;,&quot;hotelChoiceCompleted&quot;:&apos;+vars.get(&quot;hotelChoiceCompleted&quot;)+&apos;,&quot;travellerDetailsCompleted&quot;:&apos;+vars.get(&quot;travellerDetailsCompleted&quot;)+&apos;,&quot;paymentDetailsValidated&quot;:&apos;+vars.get(&quot;paymentDetailsValidated&quot;)+&apos;,&quot;flightExtrasCompleted&quot;:&apos;+vars.get(&quot;flightExtrasCompleted&quot;)+&apos;,&quot;transport&quot;:&apos;+vars.get(&quot;transportSmall&quot;)+&apos;,&quot;userInputCompleted&quot;:&apos;+vars.get(&quot;userInputCompleted&quot;)+&apos;,&quot;tripFlexCompleted&quot;:&apos;+vars.get(&quot;tripFlexCompleted&quot;)+&apos;,&quot;flightChoiceValid&quot;:&apos;+vars.get(&quot;flightChoiceValid&quot;)+&apos;,&quot;saveTriggerEvent&quot;:&quot;userInputCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;:&apos;+vars.get(&quot;cartItemsSelectionCompleted&quot;)+&apos;,&quot;completion_history&quot;:[&quot;flightChoiceCompleted&quot;,&quot;bundledAncillariesChoiceCompleted&quot;,&quot;hotelChoiceCompleted&quot;,&quot;travellerDetailsCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;flightExtrasCompleted&quot;,&quot;cartItemsSelectionCompleted&quot;,&quot;tripFlexCompleted&quot;,&quot;userInputCompleted&quot;],&quot;vouchers&quot;:[],&quot;page_viewed&quot;:[{&quot;flights&quot;:&apos;+vars.get(&quot;flights&quot;)+&apos;},{&quot;package&quot;:&apos;+vars.get(&quot;fPackage&quot;)+&apos;},{&quot;hotelchooser&quot;:&apos;+vars.get(&quot;hotelchooser&quot;)+&apos;},{&quot;transport&quot;:&apos;+vars.get(&quot;transport&quot;)+&apos;},{&quot;travellers&quot;:&apos;+vars.get(&quot;travellers&quot;)+&apos;},{&quot;seatchooser&quot;:&apos;+vars.get(&quot;seatchooser&quot;)+&apos;},{&quot;bagchooser&quot;:&apos;+vars.get(&quot;bagchooser&quot;)+&apos;},{&quot;payment&quot;:&apos;+vars.get(&quot;payment&quot;)+&apos;}],&quot;activeCampaignNames&quot;:{},&quot;upLift&quot;:{&quot;initialized&quot;:true,&quot;iFramePresent&quot;:false,&quot;enabled&quot;:true,&quot;outOfFilter&quot;:false,&quot;selected&quot;:false,&quot;approved&quot;:false,&quot;rejected&quot;:false,&quot;paymentReady&quot;:false,&quot;paymentLastUpdated&quot;:&apos;+vars.get(&quot;paymentLastUpdated&quot;)+&apos;,&quot;optionsLastUpdated&quot;:&apos;+vars.get(&quot;optionsLastUpdated&quot;)+&apos;,&quot;options&quot;:{&quot;checkout&quot;:true,&quot;container&quot;:&quot;#up-pay-monthly-container&quot;}},&quot;saved_travellers&quot;:[],&quot;deal_filter&quot;:&quot;&quot;,&quot;legs&quot;:[&quot;departing&quot;],&quot;id&quot;:&quot;&apos;+vars.get(&quot;manifestID&quot;)+&apos;&quot;,&quot;debug&quot;:[],&quot;error&quot;:[],&quot;warning&quot;:[],&quot;bundledAncillariesChoiceCompleted&quot;:&quot;&apos;+vars.get(&quot;TDateZ&quot;)+&apos;&quot;,&quot;shuttle&quot;:[]}&apos;;

vars.put(&quot;paymentCart&quot;,paymentCart);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var responseItn = JSON.parse(prev.getResponseDataAsString());
var flightItn = JSON.stringify(responseItn.confirmation.confirmationNumber).replaceAll(&apos;&quot;&apos;,&apos;&apos;);

log.info(&quot;Booking Completed Itn number is &quot;+flightItn);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
